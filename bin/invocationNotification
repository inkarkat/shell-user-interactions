#!/bin/bash
shopt -qs extglob

: ${INVOCATIONNOTIFICATION_SUCCESS_DISPLAY_DELAY=0.3}
: ${INVOCATIONNOTIFICATION_FAIL_DISPLAY_DELAY=1}
typeset -a SPINNER=(/ - \\ \|)
typeset -a SWEEPS=('[*   ]' '[-*  ]' '[ -* ]' '[  -*]' '[   *]' '[  *-]' '[ *- ]' '[*-  ]')

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-m|--message MESSAGE -t|--to overlay|title|command|notify [--success SIGIL] [--fail SIGIL] [-C|--clear success|failure|all] [-i|--inline|--spinner|--sweep|--inline-stderr|--spinner-stderr|--sweep-stderr [-t|--timespan TIMESPAN[SUFFIX]]] [-T|--initial-delay TIMESPAN[SUFFIX]] -c|--command COMMANDLINE [...]|[--] SIMPLECOMMAND'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND while MESSAGE informs the user what is happening elsewhere.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --to|-t overlay	    Report in the form of overlaid text, written via
			    ANSI escape sequences in the first line of the
			    terminal.
    --to|-t title	    Report in the terminal's window title via ANSI
			    escape sequences.
    --to|-t command	    Report by invoking
			    INVOCATIONNOTIFICATION_COMMANDLINE while replacing
			    {} with the message.
    --to|-t notify	    Report via notify-send to the system's notification
			    system.
    --message|-m MESSAGE
			Text describing what COMMAND is doing for the user.
    --success SIGIL	Append SIGIL after MESSAGE if COMMAND succeeds.
    --fail SIGIL	Append SIGIL after MESSAGE if COMMAND fails.
    --clear|-C success	Clear the MESSAGE if COMMAND succeeds.
			If --success is also given, will wait for
			$INVOCATIONNOTIFICATION_SUCCESS_DISPLAY_DELAY seconds.
    --clear|-C failure	Clear the MESSAGE if COMMAND fails, i.e. returns a
			non-zero exit status.
			If --fail is also given, will wait for
			$INVOCATIONNOTIFICATION_FAIL_DISPLAY_DELAY seconds.
    --clear|-C all	Clear the MESSAGE regardless of whether COMMAND
			succeeds or not.
    --inline|-i		Each line printed to stdout or stderr by COMMAND is
			captured and individually appended behind MESSAGE,
			overwriting any previous line (and then eventually
			overwritten itself by a SIGIL). Only stdout will pass
			through. This is useful when COMMAND itself prints
			ongoing results or status information.
			By default, both stdout and stderr will pass through.
    --spinner		Each line printed to stdout or stderr by COMMAND makes a
			spinner after MESSAGE rotate once (to indicate that
			COMMAND is still doing its job). Both stdout and stderr
			output is still passed through.
    --sweep		Each line printed to stdout or stderr by COMMAND changes
			a Knight Rider-alike sweeping control after MESSAGE (to
			indicate that COMMAND is still doing its job). Both
			stdout and stderr output is still passed through.
    --inline-stderr	Each line printed to stderr by COMMAND is captured and
			individually appended behind MESSAGE, overwriting any
			previous line (and then eventually overwritten itself by
			a SIGIL). This is useful when COMMAND itself prints
			ongoing status information to stderr. By default, any
			error output will pass through.
    --spinner-stderr	Each line printed to stderr by COMMAND makes a spinner
			after MESSAGE rotate once (to indicate that COMMAND is
			still doing its job). The output itself is discarded.
    --sweep-stderr	Each line printed to stderr by COMMAND changes a Knight
			Rider-alike sweeping control after MESSAGE (to indicate
			that COMMAND is still doing its job). The output itself
			is discarded.
    --timespan|-t TIMESPAN[SUFFIX]
			Only append / spin / sweep a line every TIMESPAN instead
			of every second. Use --timespan 0 to use every line.
			SUFFIX may be 'ms' for milliseconds, 's' for seconds
			(the default), 'm' for minutes, 'h' for hours or 'd' for
			days.
    --initial-delay|-T TIMESPAN[SUFFIX]
			Wait for TIMESPAN before notifying with the message or
			appending / spinning / sweeping based on a line. By
			default, the first notification happens immediately.
    --command|-c CMD	Execute the passed command line. When this is a simple
			command, it can also be passed as such.
EXIT STATUS:
    0	Complete success.
    1	Failed to notify.
    2	Bad invocation, wrong or missing command-line arguments.
    *	any exit status from COMMANDS

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" "-t overlay -m 'Google ping time: ' --inline-stderr -c 'ping -c 10 www.google.com 2>&1 | stdbuf -oL grep --line-buffered -o time=.* >&2'"
}

timeToSeconds()
{
    case "$1" in
	+([0-9])ms)	time="00${1%ms}"; time="0${time%???}.${time:$((${#time}-3))}"; time="${time/#+(0)/0}";;
	+([0-9])?(s))   time="${1%s}";;
	+([0-9])m)	time=$((${1%m} * 60));;
	+([0-9])h)	time=$((${1%h} * 3600));;
	+([0-9])d)	time=$((${1%d} * 86400));;
	*)		printf >&2 "ERROR: Illegal timespan: %s\\n" "$1"; exit 2;;
    esac
    printf %s "$time"
}

singleTargetCheck()
{
    if [ "$target" ]; then
	echo >&2 "ERROR: There can be only one --to."
	echo >&2
	printShortUsage "$1" >&2
	exit 2
    fi
}

abortSingleRenderer()
{
    echo >&2 'ERROR: Only one of --inline[-stderr], --spinner[-stderr], or --sweep[-stderr] can be passed.'
    echo >&2
    printShortUsage "$1" >&2
    exit 2
}

overlayTarget()
{
    if [ $# -eq 0 ]; then
	printfToTerminal %s "$INVOCATIONNOTIFICATION_OVERLAY_JUMP" "$ERASE_LINE_TO_END" "$INVOCATIONNOTIFICATION_OVERLAY_RETURN"
    else
	printfToTerminal %s "$INVOCATIONNOTIFICATION_OVERLAY_JUMP" "$INVOCATIONNOTIFICATION_OVERLAY_PREFIX" "$message" "$1" "$INVOCATIONNOTIFICATION_OVERLAY_SUFFIX" "$ERASE_LINE_TO_END" "$INVOCATIONNOTIFICATION_OVERLAY_RETURN"
    fi
}
titleTarget()
{
    if [ $# -eq 0 ]; then
	printfToTerminal %s "$INVOCATIONNOTIFICATION_TITLE_SET" "$INVOCATIONNOTIFICATION_TITLE_FINISH"
    else
	printfToTerminal %s "$INVOCATIONNOTIFICATION_TITLE_SET" "$INVOCATIONNOTIFICATION_TITLE_PREFIX" "$message" "$1" "$INVOCATIONNOTIFICATION_TITLE_SUFFIX" "$INVOCATIONNOTIFICATION_TITLE_FINISH"
    fi
}
commandStatus=0
commandTarget()
{
    [ $commandStatus -eq 0 ] || return $commandStatus

    local quotedArgument=; [ $# -gt 0 ] && printf -v quotedArgument %q "${message}$1"
    eval "${INVOCATIONNOTIFICATION_COMMANDLINE//\{\}/$quotedArgument}"
    commandStatus=$?
    return $commandStatus
}
notifyTarget()
{
    commandTarget "$@"
}

: ${SAVE_CURSOR_POSITION=[s}
: ${RESTORE_CURSOR_POSITION=[u}
: ${ERASE_LINE_TO_END=[0K}
: ${INVOCATIONNOTIFICATION_OVERLAY_JUMP=[s[1;1H}
: ${INVOCATIONNOTIFICATION_OVERLAY_PREFIX=[37;44m[}
: ${INVOCATIONNOTIFICATION_OVERLAY_SUFFIX=][0m}
: ${INVOCATIONNOTIFICATION_OVERLAY_RETURN=[u}
case "$TERM" in
    screen*)
	: ${INVOCATIONNOTIFICATION_TITLE_SET=']2;'}
	: ${INVOCATIONNOTIFICATION_TITLE_FINISH='\'}
	;;
    linux)
	# The Linux kernel console doesn't have a title, as it runs full-screen.
	printf >&2 'ERROR: Cannot drive terminal title with TERM=%s\n' "$TERM"
	exit 3
	;;
    *)
	: ${INVOCATIONNOTIFICATION_TITLE_SET=']2;'}
	: ${INVOCATIONNOTIFICATION_TITLE_FINISH=''}
	;;
esac
: ${INVOCATIONNOTIFICATION_TITLE_PREFIX=[}
: ${INVOCATIONNOTIFICATION_TITLE_SUFFIX=]}
: ${INVOCATIONNOTIFICATION_NOTIFY_SEND:=notify-send}
target=
unset message
successSigil=
failSigil=
clear=
isCaptureStdout=
isInline=
typeset -a render=()
unset timespan
initialDelay=0
isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--to|-t)	shift; singleTargetCheck "$0"; target="${1}Target"; if ! type -t "$target" >/dev/null; then printf 'ERROR: No such target: %s' "$1"; echo; printShortUsage "$0"; exit 2; fi >&2; shift;;
	--message|-m)	shift; message="$1"; shift;;
	--success)	shift; successSigil="$1"; shift;;
	--fail)		shift; failSigil="$1"; shift;;
	--clear|-C)	shift
			clear="$1"
			case "$clear" in
			    success|failure|all)  ;;
			    *)  { printf 'ERROR: Invalid value for --clear: %s\n' "$clear"; echo; printShortUsage "$0"; } >&2; exit 2;;
			esac
			shift
			;;
	--inline|-i)	shift; [ "$isInline" ] && abortSingleRenderer "$0"; isInline=t; isCaptureStdout=t;;
	--inline-stderr)
			shift; [ "$isInline" ] && abortSingleRenderer "$0"; isInline=t;;
	--spinner)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SPINNER[@]}"); isCaptureStdout=t;;
	--spinner-stderr)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SPINNER[@]}");;
	--sweep)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SWEEPS[@]}"); isCaptureStdout=t;;
	--sweep-stderr)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SWEEPS[@]}");;
	--timespan|-t)	shift; timespan="$(timeToSeconds "$1")" || exit $?; shift;;
	--initial-delay|-T)
			shift; initialDelay="$(timeToSeconds "$1")" || exit $?; shift;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	commands+=(${commands:+;} $(printf '%q ' "$@"))
    else
	commands=("$@")
    fi
fi
if [ -z "$target" -a -z "${message+t}" -a ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: Must pass -t|--to overlay|title|command|notify and -m|--message MESSAGE and COMMAND(s).'
    echo
    printShortUsage "$0"
    exit 2
elif [ -z "$target" ]; then
    echo 'ERROR: No --to target passed.'
    echo
    printShortUsage "$1"
    exit 2
elif [ -z "${message+t}" ]; then
    echo 'ERROR: Must pass -m|--message MESSAGE.'
    echo
    printShortUsage "$0"
    exit 2
elif [ "$isInline" ] && [ "${#render[@]}" -gt 0 ]; then
    abortSingleRenderer "$0"
elif [ -n "${timespan+t}" ] && [ ! "$isInline" ] && [ ${#render[@]} -eq 0 ]; then
    echo 'ERROR: --timespan can only be used in combination with one of --inline[-stderr], --spinner[-stderr], or --sweep[-stderr].'
    echo
    printShortUsage "$0"
    exit 2
elif [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
fi >&2
if [ "$target" = 'commandTarget' ]; then
    if [ -z "$INVOCATIONNOTIFICATION_COMMANDLINE" ]; then
	echo 'ERROR: Command notification must define INVOCATIONNOTIFICATION_COMMANDLINE.'
	exit 2
    fi
    if [ -n "$INVOCATIONNOTIFICATION_PRE_COMMANDLINE" ]; then
	eval "$INVOCATIONNOTIFICATION_PRE_COMMANDLINE" || exit $?
    fi
    if [ -n "$INVOCATIONNOTIFICATION_POST_COMMANDLINE" ]; then
	trap "$INVOCATIONNOTIFICATION_POST_COMMANDLINE" EXIT
    fi
elif [ "$target" = 'notifyTarget' ]; then
    if [ -z "$INVOCATIONNOTIFICATION_NOTIFY_COMMANDLINE" ] && ! which "$INVOCATIONNOTIFICATION_NOTIFY_SEND" >/dev/null 2>&1; then
	printf 'ERROR: notify-send command (%s) not found.\n' "$INVOCATIONNOTIFICATION_NOTIFY_SEND"
	exit 2
    fi
    printf -v quotedCommandName %q "$(commandName --no-interpreter ${isNeedEval:+--eval} "${commands[@]}")"
    : ${INVOCATIONNOTIFICATION_NOTIFY_COMMANDLINE:="\"$INVOCATIONNOTIFICATION_NOTIFY_SEND\"${INVOCATIONNOTIFICATION_NOTIFY_ARGUMENTS:+ $INVOCATIONNOTIFICATION_NOTIFY_ARGUMENTS} $quotedCommandName -- {}"}

    # Reuse the commandTarget for this specialization.
    INVOCATIONNOTIFICATION_COMMANDLINE="$INVOCATIONNOTIFICATION_NOTIFY_COMMANDLINE"
fi >&2
: ${timespan:=1}

case "${timespan}:${initialDelay}" in
    *.*)
	: ${DATE:=date}

	resetTime()
	{
	    if [ $# -eq 0 ]; then
		IFS='.' read startEpoch startNanos <<<"$($DATE +%s.%N)"
	    else
		IFS='.' read startEpoch startNanos <<<"$(awk 'BEGIN{ printf "%.3f\n", ARGV[1] - ARGV[2] + ARGV[3]; }' "$($DATE +%s.%N)" "${1:-0}" "${2:-0}")"
	    fi
	}
	case "$timespan" in
	    *.*)
		isExpired()
		{
		    IFS='.' read endEpoch endNanos <<<"$($DATE +%s.%N)"
		    local startMillis=10#${startNanos:0:3}; local endMillis=10#${endNanos:0:3}; local diffMillis=$(((endEpoch - startEpoch) * 1000))
		    [ $((endMillis + diffMillis - startMillis)) -ge ${timespan/./} ]
		}
		;;
	    *)
		isExpired()
		{
		    IFS='.' read endEpoch endNanos <<<"$($DATE +%s.%N)"
		    local startMillis=10#${startNanos:0:3}; local endMillis=10#${endNanos:0:3}; local diffMillis=$(((endEpoch - startEpoch) * 1000))
		    [ $((endMillis + diffMillis - startMillis)) -ge ${timespan:?}000 ]
		}
		;;
	esac
	;;
    0:0)
	resetTime()
	{
	    :
	}
	isExpired()
	{
	    :
	}
	;;
    *)
	resetTime()
	{
	    if [ $# -eq 0 ]; then
		SECONDS=0
	    else
		SECONDS=$((${1:-0} - ${2:-0}))
	    fi
	}
	isExpired()
	{
	    [ $SECONDS -ge $timespan ]
	}
	;;
esac

isTerminalOk=t
printfToTerminal()
{
    [ "$isTerminalOk" ] || return 1

    # Print directly to terminal, even if stdout is redirected, ignoring a
    # non-existing terminal.
    if ! { printf "$@" >> "${INVOCATIONNOTIFICATION_SINK:-/dev/tty}"; } 2>/dev/null; then
	isTerminalOk=
	return 1
    fi
}

invokeTarget()
{
    isExpired || return 1
    "$target" "$@" || status=$?
}
invokeTargetAndResetTimer()
{
    invokeTarget "$@" || return $?
    resetTime
    return 0
}

initialTargetStatus=
resetTime "$timespan" "$initialDelay"
if [ $initialDelay = 0 ]; then
    invokeTarget '' || initialTargetStatus=$?
fi

STATUSLINE_PREFIX='#-#'
STDIN_START=''
STDIN_END=''

teeStdoutCommand=; [ "$isCaptureStdout" ] && if [ ${#render[@]} -eq 0 ]; then teeStdoutCommand='tee -a /dev/stderr'; else teeStdoutCommand="tee >(sed --unbuffered 's/.*/${STDIN_START}&${STDIN_END}/' >> /dev/stderr)"; fi
let renderCount=0
unset previousLine
unset status
exec 4>&1 1>&2 2>&4 4>&-
while IFS=$'\n' read -r line
do
    netLine="${line%${STATUSLINE_PREFIX}+([0-9])}"

    if [ "$isInline" ]; then
	if [ -n "$netLine" ]; then
	    invokeTargetAndResetTimer "$netLine"
	fi
    elif [ "${#render[@]}" -gt 0 ]; then
	if [ "$isCaptureStdout" ]; then
	    stderrLine="${netLine//${STDIN_START}*${STDIN_END}/}"
	    if [ -n "$stderrLine" ]; then
		printf '%s\n' "$stderrLine"
		netLine="${netLine//$STDIN_START/}"; netLine="${netLine//$STDIN_END/}"
	    fi
	fi

	if [ -n "$netLine" ]; then
	    if invokeTargetAndResetTimer "${render[$renderCount]}"; then
		let renderCount=$(((renderCount + 1) % ${#render[@]}))
	    fi
	fi
    else
	# To avoid printing the last (exit status) line, buffer one line and
	# lag behind one line with printing.
	if [ -n "${previousLine+t}" ]; then
	    printf '%s\n' "$previousLine"
	fi
	previousLine="$line"
    fi
    statusLine="$line"
done < <(
    (
	if [ "$isNeedEval" ]; then
	    eval 'eval "${commands[@]}"' ${teeStdoutCommand:+|}$teeStdoutCommand
	else
	    eval '"${commands[@]}"' ${teeStdoutCommand:+|}$teeStdoutCommand
	fi 4>&1 1>&2 2>&4 4>&-
	status=${PIPESTATUS[0]}
	${teeStdoutCommand:+sleep 0}
	exit $status
    )
    printf '%s%d\n' "$STATUSLINE_PREFIX" "$?"
)
exec 4>&1 1>&2 2>&4 4>&-

[ -n "${status+t}" ] || status="${statusLine#\#-\#}"

if [ -n "$successSigil" -a $status -eq 0 ]; then
    "$target" "$successSigil" || status=$?
    case "$clear" in
	all|success) sleep "$INVOCATIONNOTIFICATION_SUCCESS_DISPLAY_DELAY";;
    esac
elif [ -n "$failSigil" -a $status -ne 0 ]; then
    "$target" "$failSigil" || status=$?
    case "$clear" in
	all|failure) sleep "$INVOCATIONNOTIFICATION_FAIL_DISPLAY_DELAY";;
    esac
fi

if [ "$clear" ] && [ \
    "$clear" = all -o \
    \( "$clear" = success -a $status -eq 0 \) -o \
    \( "$clear" = failure -a $status -ne 0 \) \
    ] ; then
    "$target" || status=$?
fi

exit ${initialTargetStatus:-$status}
