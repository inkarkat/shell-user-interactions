#!/bin/bash
shopt -qs extglob

: ${INVOCATIONMESSAGE_SUCCESS_DISPLAY_DELAY=0.3}
: ${INVOCATIONMESSAGE_FAIL_DISPLAY_DELAY=1}
: ${INVOCATIONMESSAGE_TIMER_INLINE_PREFIX=(}
: ${INVOCATIONMESSAGE_TIMER_INLINE_SUFFIX=) }
: ${INVOCATIONMESSAGE_TIMER_RENDER_PREFIX=(}
: ${INVOCATIONMESSAGE_TIMER_RENDER_SUFFIX=) }
: ${INVOCATIONMESSAGE_TIMER_SIGIL_PREFIX= (}
: ${INVOCATIONMESSAGE_TIMER_SIGIL_SUFFIX=)}
typeset -a SPINNER=(/ - \\ \| '')
typeset -a SWEEPS=('[*   ]' '[-*  ]' '[ -* ]' '[  -*]' '[   *]' '[  *-]' '[ *- ]' '[*-  ]' '')

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--or-passthrough] -m|--message MESSAGE [--success SIGIL] [--fail SIGIL] [-C|--clear success|failure|all] [-i|--inline|--spinner|--sweep|--inline-stderr|--spinner-stderr|--sweep-stderr|--inline-spinner-stderr|--inline-sweep-stderr [-t|--timespan TIMESPAN[SUFFIX]]] [-T|--initial-delay TIMESPAN[SUFFIX]] [--timer INTERVAL[SUFFIX]|--render-timer INTERVAL[SUFFIX]] -c|--command COMMANDLINE [...]|[--] SIMPLECOMMAND'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
plural()
{
    if [ "$1" = 1 ]; then
	printf %s "${2}${4}"
    else
	printf %s "${2}${3:-s}"
    fi
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND while MESSAGE informs the user what is happening (when output is
to a terminal).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --or-passthrough	When not connected to a terminal, omit MESSAGE,
			SIGIL(s), and any inlining or rendering. Basically, just
			execute COMMAND(s) without interfering in any way.
    --message|-m MESSAGE
			Text describing what COMMAND is doing for the user.
    --success SIGIL	Append SIGIL after MESSAGE if COMMAND succeeds.
    --fail SIGIL	Append SIGIL after MESSAGE if COMMAND fails.
    --clear|-C success	Clear the MESSAGE if COMMAND succeeds.
			If --success is also given, will wait for
			$INVOCATIONMESSAGE_SUCCESS_DISPLAY_DELAY $(plural $INVOCATIONMESSAGE_SUCCESS_DISPLAY_DELAY second).
    --clear|-C failure	Clear the MESSAGE if COMMAND fails, i.e. returns a
			non-zero exit status.
			If --fail is also given, will wait for
			$INVOCATIONMESSAGE_FAIL_DISPLAY_DELAY $(plural $INVOCATIONMESSAGE_FAIL_DISPLAY_DELAY second).
    --clear|-C all	Clear the MESSAGE regardless of whether COMMAND
			succeeds or not.
    --inline|-i		Each line printed to stdout or stderr by COMMAND is
			captured and individually appended behind MESSAGE,
			overwriting any previous line (and then eventually
			overwritten itself by a SIGIL). A copy of stdout is
			printed after COMMAND concludes as well. This is useful
			when COMMAND itself prints ongoing results or status
			information.
			By default, stdout will pass through and any error
			output will be captured and shown after COMMAND
			concludes (after [clearing the] MESSAGE).
    --spinner		Each line printed to stdout or stderr by COMMAND makes a
			spinner after MESSAGE rotate once (to indicate that
			COMMAND is still doing its job). The stdout output is
			still passed through, and a copy of stderr is printed
			after COMMAND concludes as well.
    --sweep		Each line printed to stdout or stderr by COMMAND changes
			a Knight Rider-alike sweeping control after MESSAGE (to
			indicate that COMMAND is still doing its job). The
			stdout output is still passed through, and a copy of
			stderr is printed after COMMAND concludes as well.
    --inline-stderr	Each line printed to stderr by COMMAND is captured and
			individually appended behind MESSAGE, overwriting any
			previous line (and then eventually overwritten itself by
			a SIGIL). This is useful when COMMAND itself prints
			ongoing status information to stderr. By default, any
			error output will be captured and shown after COMMAND
			concludes (after [clearing the] MESSAGE).
    --spinner-stderr	Each line printed to stderr by COMMAND makes a spinner
			after MESSAGE rotate once (to indicate that COMMAND is
			still doing its job). The output itself is discarded.
    --sweep-stderr	Each line printed to stderr by COMMAND changes a Knight
			Rider-alike sweeping control after MESSAGE (to indicate
			that COMMAND is still doing its job). The output itself
			is discarded.
    --inline-spinner-stderr
			Lines printed to stdout are appended as with --inline,
			but lines printed to stderr make a spinner after MESSAGE
			/ the last line rotate like --spinner-stderr.
    --inline-sweep-stderr
			Lines printed to stdout are appended as with --inline,
			but lines printed to stderr changes a sweeping control
			after MESSAGE / the last line like --sweep-stderr.
    --timespan|-t TIMESPAN[SUFFIX]
			Only append / spin / sweep a line every TIMESPAN instead
			of every second. Use --timespan 0 to use every line.
			SUFFIX may be 'ms' for milliseconds, 's' for seconds
			(the default), 'm' for minutes, 'h' for hours or 'd' for
			days.
    --initial-delay|-T TIMESPAN[SUFFIX]
			Wait for TIMESPAN before printing the message or
			appending / spinning / sweeping based on a line, or
			printing the first total running time. By default, the
			message is printed immediately. If COMMAND finishes
			earlier, no message (and SIGIL) get printed at all.
    --timer INTERVAL[SUFFIX]
			Append the COMMAND's total running time after MESSAGE
			every INTERVAL. This provides some form of feedback if
			COMMAND does not (or not often) provide output.
    --render-timer INTERVAL[SUFFIX]
			Rotate the spinner / change the sweeping control every
			INTERVAL. This provides some form of feedback if COMMAND
			does not (or not often) provide output.
    --command|-c CMD	Execute the passed command line. When this is a simple
			command, it can also be passed as such.
EXIT STATUS:
    0	Complete success.
    1	Failed to write to the terminal.
    2	Bad invocation, wrong or missing command-line arguments.
    *   any exit status from COMMAND(s)

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" "-m 'Google ping time: ' --inline-stderr -c 'ping -c 10 www.google.com 2>&1 | stdbuf -oL grep --line-buffered -o time=.* >&2'"
}

timeToSeconds()
{
    case "$1" in
	+([0-9])ms)	if [ "$3" ]; then
			    echo >&2 "ERROR: Fractional seconds not allowed for ${2:-timespan}."; exit 2
			else
			    time="00${1%ms}"; time="0${time%???}.${time:$((${#time}-3))}"; time="${time/#+(0)/0}"
			fi
			;;
	+([0-9])?(s))   time="${1%s}";;
	+([0-9])m)	time=$((${1%m} * 60));;
	+([0-9])h)	time=$((${1%h} * 3600));;
	+([0-9])d)	time=$((${1%d} * 86400));;
	*)		printf >&2 "ERROR: Illegal ${2:-timespan}: %s\\n" "$1"; exit 2;;
    esac
    printf %s "$time"
}

abortSingleRenderer()
{
    echo >&2 'ERROR: Only one of --inline[-stderr], --spinner[-stderr], or --sweep[-stderr] can be passed.'
    echo >&2
    printShortUsage "$1" >&2
    exit 2
}

if [ -z "${INVOCATIONMESSAGE_STDERR_TO_TERM+t}" ]; then
    [ -t 2 ] && INVOCATIONMESSAGE_STDERR_TO_TERM=t
fi

: ${SAVE_CURSOR_POSITION=[s}
: ${RESTORE_CURSOR_POSITION=[u}
: ${ERASE_TO_END=[0J}
isPassthroughIfNoTerminal=
unset message
successSigil=
failSigil=
clear=
isCaptureStdout=
isInline=
isInlineWithRender=
typeset -a render=()
unset timespan
initialDelay=0
reader=defaultReader
timer=
isTimer=
isRenderTimer=
isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--or-passthrough)
			shift; isPassthroughIfNoTerminal=t;;
	--message|-m)	shift; message="$1"; shift;;
	--success)	shift; successSigil="$1"; shift;;
	--fail)		shift; failSigil="$1"; shift;;
	--clear|-C)	shift
			clear="$1"
			case "$clear" in
			    success|failure|all)  ;;
			    *)  { printf 'ERROR: Invalid value for --clear: %s\n' "$clear"; echo; printShortUsage "$0"; } >&2; exit 2;;
			esac
			shift
			;;
	--inline|-i)	shift; [ "$isInline" ] && abortSingleRenderer "$0"; isInline=t; isCaptureStdout=t;;
	--inline-stderr)
			shift; [ "$isInline" ] && abortSingleRenderer "$0"; isInline=t;;
	--spinner)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SPINNER[@]}"); isCaptureStdout=t;;
	--spinner-stderr)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SPINNER[@]}");;
	--inline-spinner-stderr)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SPINNER[@]}"); isCaptureStdout=t; isInlineWithRender=t;;
	--sweep)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SWEEPS[@]}"); isCaptureStdout=t;;
	--sweep-stderr)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SWEEPS[@]}");;
	--inline-sweep-stderr)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SWEEPS[@]}"); isCaptureStdout=t; isInlineWithRender=t;;
	--timespan|-t)	shift; timespan="$(timeToSeconds "$1")" || exit $?; shift;;
	--initial-delay|-T)
			shift; initialDelay="$(timeToSeconds "$1")" || exit $?; shift;;
	--timer)	shift; reader=timeoutReader; timer="$(timeToSeconds "$1" interval t)" || exit $?; shift; SECONDS=0; isTimer=t;;
	--render-timer)	shift; reader=timeoutReader; timer="$(timeToSeconds "$1" interval t)" || exit $?; shift; SECONDS=0; isRenderTimer=t;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	commands+=(${commands:+;} $(printf '%q ' "$@"))
    else
	commands=("$@")
    fi
fi
if [ -z "${message+t}" -a ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: Must pass -m|--message MESSAGE and COMMAND(s).'
    echo
    printShortUsage "$0"
    exit 2
elif [ -z "${message+t}" ]; then
    echo 'ERROR: Must pass -m|--message MESSAGE.'
    echo
    printShortUsage "$0"
    exit 2
elif [ "$isInline" ] && [ "${#render[@]}" -gt 0 ]; then
    abortSingleRenderer "$0"
elif [ -n "${timespan+t}" ] && [ ! "$isInline" ] && [ ${#render[@]} -eq 0 ]; then
    echo 'ERROR: --timespan can only be used in combination with one of --inline[-stderr], --spinner[-stderr], or --sweep[-stderr].'
    echo
    printShortUsage "$0"
    exit 2
elif [ "$isRenderTimer" ] && [ ${#render[@]} -eq 0 ]; then
    echo 'ERROR: --render-timer can only be used in combination with --spinner[-stderr] or --sweep[-stderr].'
    echo
    printShortUsage "$0"
    exit 2
elif [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
fi >&2

isTerminalOk=t
printfToTerminal()
{
    [ "$isTerminalOk" ] || return 1

    # Print directly to terminal, even if stdout is redirected, ignoring a
    # non-existing terminal.
    if ! { printf "$@" >> "${INVOCATIONMESSAGE_SINK:-/dev/tty}"; } 2>/dev/null; then
	isTerminalOk=
	return 1
    fi
}

if [ "$isPassthroughIfNoTerminal" ] && ! printfToTerminal ''; then
    if [ "$isNeedEval" ]; then
	eval "${commands[@]}"
    else
	"${commands[@]}"
    fi
    exit $?
fi

: ${timespan:=1}
# If the timer is used, reserve use of SECONDS for that (as we can easily (but a
# bit more slowly) use external date for the timespan and initial delay), as
# timing interval likely will fire more often than the (likely infrequent)
# output.
case "${timespan}:${initialDelay}${timer:+.}" in
    0:0?(.))
	resetTime()
	{
	    :
	}
	isExpired()
	{
	    :
	}
	;;
    *.*)
	: ${DATE:=date}

	resetTime()
	{
	    if [ $# -eq 0 ]; then
		IFS='.' read startEpoch startNanos <<<"$($DATE +%s.%N)"
	    else
		IFS='.' read startEpoch startNanos <<<"$(awk 'BEGIN{ printf "%.3f\n", ARGV[1] - ARGV[2] + ARGV[3]; }' "$($DATE +%s.%N)" "${1:-0}" "${2:-0}")"
	    fi
	}
	case "$timespan" in
	    *.*)
		isExpired()
		{
		    IFS='.' read endEpoch endNanos <<<"$($DATE +%s.%N)"
		    local startMillis=10#${startNanos:0:3}; local endMillis=10#${endNanos:0:3}; local diffMillis=$(((endEpoch - startEpoch) * 1000))
		    [ $((endMillis + diffMillis - startMillis)) -ge ${timespan/./} ]
		}
		;;
	    *)
		isExpired()
		{
		    IFS='.' read endEpoch endNanos <<<"$($DATE +%s.%N)"
		    local startMillis=10#${startNanos:0:3}; local endMillis=10#${endNanos:0:3}; local diffMillis=$(((endEpoch - startEpoch) * 1000))
		    [ $((endMillis + diffMillis - startMillis)) -ge ${timespan:?}000 ]
		}
		;;
	esac
	;;
    *)
	resetTime()
	{
	    if [ $# -eq 0 ]; then
		SECONDS=0
	    else
		SECONDS=$((${1:-0} - ${2:-0}))
	    fi
	}
	isExpired()
	{
	    [ $SECONDS -ge $timespan ]
	}
	;;
esac

line=
duration=0
lastDuration=0
lastRenderedDuration=
defaultReader()
{
    IFS=$'\n' read -r line
}
heldChars=''
timeoutReader()
{
    local char remainingLine status
    while :
    do
	if IFS=$'\n' read -t 2 -n 1 -r char; then
	    if [ -z "$char" ]; then
		line="${heldChars}"
		heldChars=''
		return 0
	    else
		heldChars="${heldChars}$char"
		continue
	    fi
	elif [ $? -gt 128 ]; then
	    duration=$SECONDS
	    return 0
	elif [ -n "$heldChars" ]; then
	    line="$heldChars"
	    heldChars=''
	    return 0
	else
	    line=''
	    return 1
	fi
    done
}

nonExpiryExitStatus=1
printMessageRaw()
{
    isExpired || return ${nonExpiryExitStatus:-1}

    if [ "$delayedMessage" ]; then
	printfToTerminal %s "$delayedMessage" || return $?
	delayedMessage=
    fi

    printfToTerminal "$@"
}
hasPrintedMessage=
printMessage()
{
    printMessageRaw "$@" || return $?
    hasPrintedMessage=t
}
printMessageAndResetTimer()
{
    printMessage "$@" || return $?
    resetTime
    return 0
}
printMessageAddendum()
{
    if [ "$hasPrintedMessage" ]; then
	printfToTerminal "$@"
    else
	nonExpiryExitStatus=0	# Only consider writing to the terminal a failure; skipping the message because the timer hasn't expired yet is fine for the addendum.
	printMessage "$@"
    fi
}
printDuration()
{
    if [ "$hasPrintedMessage" ]; then
	# Initial delay has already passed, do the update without considering
	# timeout expiry.
	printfToTerminal "$@"
    else
	printMessage "$@"
    fi
}
secondsToDuration()
{
    local seconds="${1:?}"; shift
    local weeks=$((seconds / 604800))
    seconds=$((seconds - 604800 * weeks))
    local days=$((seconds / 86400))
    seconds=$((seconds - 86400 * days))
    local hours=$((seconds / 3600))
    seconds=$((seconds - 3600 * hours))
    local minutes=$((seconds / 60))
    seconds=$((seconds - (60 * minutes)))

    local renderedWeeks renderedDays renderedHours renderedMinutes renderedSeconds
    [ $weeks -gt 0 ] && renderedWeeks="${weeks}w "
    [ $days -gt 0 ] && renderedDays="${days}d "
    [ $weeks -gt 0 -o $days -gt 0 -o $hours -gt 0 ] && printf -v renderedHours %02d: "$hours"
    [ $weeks -gt 0 -o $days -gt 0 -o $hours -gt 0 -o $minutes -gt 0 ] && printf -v renderedMinutes %02d: "$minutes"
    [ $weeks -gt 0 -o $days -gt 0 -o $hours -gt 0 -o $minutes -gt 0 ] && printf -v renderedSeconds %02d "$seconds" || renderedSeconds="${seconds}s"
    printf '%s%s%s%s%s' "$renderedWeeks" "$renderedDays" "$renderedHours" "$renderedMinutes" "$renderedSeconds"
}
handlePlainDurationUpdate()
{
    printDuration %s "${lastRenderedDuration//?/}${renderedDuration}${lastRenderedDuration:+$ERASE_TO_END}" || return
    sigilPrefix="${renderedDuration//?/}${renderedDuration:+$ERASE_TO_END}"
    lastDuration="$duration"
    lastRenderedDuration="$renderedDuration"
}

initialPrintStatus=
resetTime "$timespan" "$initialDelay"
delayedMessage=
if [ $initialDelay = 0 ]; then
    printMessage %s "${clear:+$SAVE_CURSOR_POSITION}$message" || initialPrintStatus=$?
else
    delayedMessage="${clear:+$SAVE_CURSOR_POSITION}$message"
fi

STATUSLINE_PREFIX='#-#'
STDIN_START=''
STDIN_END=''

isFirst=t
sigilPrefix=
nonSigilnonClearFinalOutput=
previousStdinLine=
isFirstStdinLine=t
let renderCount=0
commandErrorOutput=
teeStdoutCommand=; [ "$isCaptureStdout" ] && if [ ${#render[@]} -eq 0 ]; then teeStdoutCommand='tee -a /dev/stderr'; else teeStdoutCommand="tee >(sed --unbuffered 's/.*/${STDIN_START}&${STDIN_END}/' >> /dev/stderr)"; fi
exec 4>&1 1>&2 2>&4 4>&-
while $reader
do
    if [ $((duration - lastDuration)) -ge ${timer:-999} ]; then
	if [ "$isInline" ]; then
	    renderedDuration="$(secondsToDuration "$duration")"
	    netLine="${line%${STATUSLINE_PREFIX}+([0-9])}"
	    if [ "$isFirst" ]; then
		if [ "$clear" ]; then
		    printDuration %s "${INVOCATIONMESSAGE_TIMER_INLINE_PREFIX}${renderedDuration}${INVOCATIONMESSAGE_TIMER_INLINE_SUFFIX}$netLine"
		else
		    printDuration %s "${SAVE_CURSOR_POSITION}${INVOCATIONMESSAGE_TIMER_INLINE_PREFIX}${renderedDuration}${INVOCATIONMESSAGE_TIMER_INLINE_SUFFIX}$netLine"
		fi && isFirst=
	    else
		printDuration %s "${RESTORE_CURSOR_POSITION}${ERASE_TO_END}${clear:+$message}${INVOCATIONMESSAGE_TIMER_INLINE_PREFIX}${renderedDuration}${INVOCATIONMESSAGE_TIMER_INLINE_SUFFIX}$netLine"
	    fi && sigilPrefix="${RESTORE_CURSOR_POSITION}${ERASE_TO_END}${clear:+$message}"
	elif [ "${#render[@]}" -gt 0 ]; then
	    [ "$isTimer" ] && renderedDuration="$(secondsToDuration "$duration")" || renderedDuration=''
	    netLine="${line%${STATUSLINE_PREFIX}+([0-9])}"
	    netLine="${netLine}${netLine:+ }"
	    if if [ -z "$renderedDuration" ] && [ "$isFirstStdinLine" ]; then
		    undoRender="${render[-1]}"; [ "$isFirst" ] && undoRender=
		    if [ "$clear" ]; then
			printDuration %s "$undoRender" "$netLine" "${render[$renderCount]}"
		    else
			printDuration %s "$undoRender" "${SAVE_CURSOR_POSITION}$netLine" "${render[$renderCount]}"
		    fi && { isFirstStdinLine=; isFirst=; }
		elif [ "$isFirstStdinLine" ]; then
		    undoRender="${render[-1]}"; [ "$isFirst" ] && undoRender=
		    if [ "$clear" ]; then
			printDuration %s "${undoRender}${renderedDuration:+$INVOCATIONMESSAGE_TIMER_RENDER_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONMESSAGE_TIMER_RENDER_SUFFIX}$netLine" "${render[$renderCount]}"
		    else
			printDuration %s "${undoRender}${SAVE_CURSOR_POSITION}${renderedDuration:+$INVOCATIONMESSAGE_TIMER_RENDER_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONMESSAGE_TIMER_RENDER_SUFFIX}$netLine" "${render[$renderCount]}"
		    fi && isFirstStdinLine=
		else
		    printDuration %s "${RESTORE_CURSOR_POSITION}${ERASE_TO_END}${clear:+$message}${renderedDuration:+$INVOCATIONMESSAGE_TIMER_RENDER_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONMESSAGE_TIMER_RENDER_SUFFIX}$netLine" "${render[$renderCount]}"
		fi; then
		sigilPrefix="${RESTORE_CURSOR_POSITION}${ERASE_TO_END}${clear:+$message}"
		[ "$isRenderTimer" ] && let renderCount=$(((renderCount + 1) % (${#render[@]} - 1)))
		nonSigilnonClearFinalOutput="${render[-1]}${render[-1]//?/ }"
	    fi

	    previousStdinLine="$stdinLine"
	    statusLine="$line"
	    continue
	else
	    renderedDuration="$(secondsToDuration "$duration")"
	    handlePlainDurationUpdate
	fi
    else
	if [ -n "$timer" ]; then
	    if [ $((SECONDS - lastDuration)) -ge $timer ]; then
		duration=$SECONDS
		renderedDuration="$(secondsToDuration "$duration")"
	    fi
	fi

	if [ "$isInline" ]; then
	    netLine="${line%${STATUSLINE_PREFIX}+([0-9])}"
	    if [ -n "$netLine" ]; then
		if [ "$isFirst" ]; then
		    if [ "$clear" ]; then
			printMessageAndResetTimer %s "$netLine"
		    else
			printMessageAndResetTimer %s "${SAVE_CURSOR_POSITION}$netLine"
		    fi && isFirst=
		else
		    printMessageAndResetTimer %s "${RESTORE_CURSOR_POSITION}${ERASE_TO_END}${clear:+$message}$netLine"
		fi && sigilPrefix="${RESTORE_CURSOR_POSITION}${ERASE_TO_END}${clear:+$message}"
	    fi
	elif [ "${#render[@]}" -gt 0 ]; then
	    netLine="${line%${STATUSLINE_PREFIX}+([0-9])}"
	    if [ "$isInlineWithRender" ]; then
		stderrLine="${netLine//${STDIN_START}*${STDIN_END}/}"
		if [ "$stderrLine" != "$netLine" ]; then
		    stdinLine="${netLine#*${STDIN_START}}"
		    stdinLine="${stdinLine%%${STDIN_END}*}"
		    if [ "$stdinLine" != "$previousStdinLine" ]; then
			netLine="${stdinLine}${stdinLine:+ }"
			if if [ "$isFirstStdinLine" ]; then
				undoRender="${render[-1]}"; [ "$isFirst" ] && undoRender=
				if [ "$clear" ]; then
				    printMessageAndResetTimer %s "$undoRender" "$netLine" "${render[$renderCount]}"
				else
				    printMessageAndResetTimer %s "$undoRender" "${SAVE_CURSOR_POSITION}$netLine" "${render[$renderCount]}"
				fi && { isFirstStdinLine=; isFirst=; }
			    else
				printMessageAndResetTimer %s "${RESTORE_CURSOR_POSITION}${ERASE_TO_END}${clear:+$message}$netLine" "${render[$renderCount]}"
			    fi; then
			    sigilPrefix="${RESTORE_CURSOR_POSITION}${ERASE_TO_END}${clear:+$message}"
			    let renderCount=$(((renderCount + 1) % (${#render[@]} - 1)))
			    nonSigilnonClearFinalOutput="${render[-1]}${render[-1]//?/ }"
			fi

			previousStdinLine="$stdinLine"
			statusLine="$line"
			continue
		    fi  # else (the stdinLine has not changed) fall through to the plain rendering below.
		fi
	    elif [ "$isCaptureStdout" ]; then
		stderrLine="${netLine//${STDIN_START}*${STDIN_END}/}"
		if [ -n "$stderrLine" ]; then
		    commandErrorOutput="${commandErrorOutput}${commandErrorOutput:+
}$stderrLine"
		    netLine="${netLine//$STDIN_START/}"; netLine="${netLine//$STDIN_END/}"
		fi
	    fi

	    if [ -n "$netLine" ]; then
		if if [ "$isFirst" ]; then
			printMessageAndResetTimer %s "${render[$renderCount]}" && isFirst=
		    else
			printMessageAndResetTimer %s "${render[-1]}${render[$renderCount]}"
		    fi; then
		    let renderCount=$(((renderCount + 1) % (${#render[@]} - 1)))
		    : ${sigilPrefix:="${render[-1]}"}   # Only set when not yet initialized by inline-with-render algorithm above.
		    nonSigilnonClearFinalOutput="${render[-1]}${render[-1]//?/ }"
		fi
	    fi
	else
	    commandErrorOutput="${commandErrorOutput}${commandErrorOutput:+
}$line"
	    [ -n "$timer" -a "$lastDuration" != "$duration" ] && handlePlainDurationUpdate
	fi
    fi
    statusLine="$line"
done < <(
    (
	if [ "$isNeedEval" ]; then
	    eval 'eval "${commands[@]}"' ${teeStdoutCommand:+|}$teeStdoutCommand
	else
	    eval '"${commands[@]}"' ${teeStdoutCommand:+|}$teeStdoutCommand
	fi 4>&1 1>&2 2>&4 4>&-
	commandStatus=${PIPESTATUS[0]}
	${teeStdoutCommand:+sleep ${INVOCATIONMESSAGE_SYNC_DELAY:-0.01}}
	exit $commandStatus
    )
    printf '%s%d\n' "$STATUSLINE_PREFIX" "$?"
)
exec 4>&1 1>&2 2>&4 4>&-

status="${statusLine##*$STATUSLINE_PREFIX}"
commandErrorOutput="${commandErrorOutput%${STATUSLINE_PREFIX}+([0-9])}"
case "$commandErrorOutput" in
    *$'\n'?*)	isSingleCommandError=;;
    *)		isSingleCommandError=t;;
esac

hasSigil=
if [ -n "$timer" ]; then
    [ -n "${INVOCATIONMESSAGE_TIMER_SIGIL_PREFIX}${INVOCATIONMESSAGE_TIMER_SIGIL_SUFFIX}" ] &&
	renderedDuration="$(secondsToDuration "$SECONDS")" ||
	renderedDuration=''
fi
if [ -n "$successSigil" -a $status -eq 0 ]; then
    hasSigil=t
    printMessageAddendum %s "$sigilPrefix" "$successSigil" "${renderedDuration:+$INVOCATIONMESSAGE_TIMER_SIGIL_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONMESSAGE_TIMER_SIGIL_SUFFIX}" || status=1
    case "$clear" in
	all|success) sleep "$INVOCATIONMESSAGE_SUCCESS_DISPLAY_DELAY";;
    esac
elif [ -n "$failSigil" -a $status -ne 0 ]; then
    hasSigil=t
    printMessageAddendum %s "$sigilPrefix" "$failSigil" "${renderedDuration:+$INVOCATIONMESSAGE_TIMER_SIGIL_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONMESSAGE_TIMER_SIGIL_SUFFIX}" || status=1
    case "$clear" in
	all|failure) sleep "$INVOCATIONMESSAGE_FAIL_DISPLAY_DELAY";;
    esac
fi

hasCleared=
if [ "$clear" ] && [ "$hasPrintedMessage" ] && [ \
    "$clear" = all -o \
    \( "$clear" = success -a $status -eq 0 \) -o \
    \( "$clear" = failure -a $status -ne 0 \) \
    ] ; then
    hasCleared=t
    printfToTerminal %s "${RESTORE_CURSOR_POSITION}${ERASE_TO_END}" || status=1
fi
if [ ! "$hasCleared" ] && [ ! "$hasSigil" ] && [ "$hasPrintedMessage" ] && [ "$nonSigilnonClearFinalOutput" ]; then
    printfToTerminal %s "$nonSigilnonClearFinalOutput" || status=1
fi
if [ -n "$commandErrorOutput" ]; then
    commandErrorOutput="${commandErrorOutput%$'\n'}"
    if [ "$hasCleared" ]; then
	printf >&2 '%s\n' "$commandErrorOutput"
    elif [ "$isSingleCommandError" ]; then
	if [ "$hasSigil" ] && [ "$INVOCATIONMESSAGE_STDERR_TO_TERM" ]; then
	    printfToTerminal '; ' || status=1
	fi
	printf >&2 "%s\\n" "$commandErrorOutput"
    else
	if [ "$hasPrintedMessage" ] && [ "$INVOCATIONMESSAGE_STDERR_TO_TERM" ]; then
	    printfToTerminal '\n' || status=1
	fi
	printf >&2 '%s\n' "$commandErrorOutput"
    fi
    if [ "$hasPrintedMessage" ] && [ ! "$INVOCATIONMESSAGE_STDERR_TO_TERM" ]; then
	printfToTerminal '\n' || status=1
    fi
elif [ "$hasPrintedMessage" ] && [ ! "$hasCleared" ]; then
    printfToTerminal '\n' || status=1
fi

exit ${initialPrintStatus:-$status}
