#!/bin/bash
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: [OFFERTO_DEFAULT=NUM] %q %s && COMMAND\n' "$(basename "$1")" '[-d|--default y[es]|n[o]|NUM] [-t|--timeout|--for SECONDS] [-a|--any-key] [-c|--clear-prompt|-k|--keep-prompt] WHAT|- [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Prompt the user whether to do WHAT and return 0 if the user accepted, or 1 if
the user declined. The user has to press y or n to conclude the prompt.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --default|-d y[es]|n[o]|NUM
			This is taken as the answer in case of a --timeout, or
			if --any-key is allowed and something other than Y or N
			has been pressed. Can also be preset (as numeric exit
			status; 0=yes, 1=no) via OFFERTO_DEFAULT.
    --timeout|-t|--for SECONDS
			Wait only for SECONDS instead of indefinitely, then
			return no or what is set via --default.
    --any-key|-a	Keys other than Y or N are taken as no (or what is set
			via --default) and conclude the prompt instead of
			continuing to wait for valid input.
    --clear-prompt|-c	Completely clear the prompt and answer, so that nothing
			remains to be seen in the terminal of this user
			interaction.
    --keep-prompt|-k	Keep the prompt and chosen answer on the screen. This is
			the default.
HELPTEXT
}

: ${POS1_AND_ERASE_LINE=[1G[2K}
clearPromptSequence=
typeset readArgs=()
isAnyKey=
timeout=
timeoutValue=
default=${OFFERTO_DEFAULT:-1}
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--default|-d)	shift
			case "$1" in
			    yes|y)	default=0;;
			    no|n)	default=1;;
			    +([0-9]))	default=$1;;
			    *)		printf >&2 'ERROR: Bad default "%s".\n' "$1"; printUsage "$0" >&2; exit 2;;
			esac
			shift
			;;
	--any-key|-a)	shift; isAnyKey=t;;
	--clear-prompt|-c)
			shift; clearPromptSequence="$POS1_AND_ERASE_LINE";;
	--keep-prompt|-k)
			shift; clearPromptSequence=;;
	--timeout|-t|--for)
			shift; readArgs+=(-t "$1"); timeoutPlural=s; [ "$1" = 1 ] && timeoutPlural=; timeoutValue="${1} second$timeoutPlural"; shift;;
	-)		break;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 1 ]; then
    printUsage "$0" >&2
    exit 2
fi
if [ "$1" = - ]; then
    what="$(< /dev/stdin)"
else
    what="$1"
fi

case "$default" in
    0)	choices="${isAnyKey:+*/}${timeout:+[}y${timeout:+]}/n";;
    *)	choices="y/${timeout:+[}n${timeout:+]}${isAnyKey:+/*}";;
esac
fullChoices="(${choices}${timeoutValue:+ within $timeoutValue})"
promptText="${what:-Do you want to?} $fullChoices"

if [[ -n "$clearPromptSequence" && ( ${#promptText} > ${COLUMNS:-80} || "$promptText" =~ $'\n' ) ]]; then
    # The output spans multiple terminal lines; need to determine how many to be
    # able to completely clear them.
    numLines=$(printf '%s' "$promptText" | nowrap --wrap | wc -l)
    clearPromptSequence="[$((${numLines:-2} - 1))F[0J" # Return cursor to the beginning of the previous $numLines lines and clear to end of screen.
fi

status=$default
while :
do
    choice="$(userquery -r -s -N 1 "${readArgs[@]}" -p "$promptText")"
    if [ $? -eq ${USERQUERY_EXIT_STATUS_NO_TERM:-99} -o $? -gt 128 ]; then
	[ $default -eq 0 ] && choice='(y)' || choice='(n)'
	break
    fi
    case "${choice,,}" in
	y)  status=0; break;;
	n)  status=1; break;;
	*)  [ "$isAnyKey" ] && break;;
    esac
    promptText=
done

updateChoicesSequence=
if [ -z "$clearPromptSequence" ]; then
    clearFullChoices="${fullChoices//?/ }"
    updateChoicesSequence="${fullChoices//?/}${choice,,}${clearFullChoices:0:-${#choice}}"
fi

{ printf >/dev/tty %s "${updateChoicesSequence}${clearPromptSequence:-$'\n'}"; } 2>/dev/null
exit $status
