#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-i|--id ID -I|--initial|-F|--finish [-m|--message MESSAGE] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '-i|--id ID -C|--clear'
    printf 'Usage: %q %s\n' "$(basename "$1")" '-i|--id ID -U|--update [-M|--update-message U-MESSAGE] [-m|--message MESSAGE] [-c|--command COMMANDLINE [--silent-command]] [[--] SIMPLECOMMAND]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Prints a message directly to the terminal and updates it inline (using ANSI
escape sequences) throughout multiple invocations by the same client.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --initial|-I    The very first call; records the start time (for duration
		    measurements) and resets the count.
    --update|-U	    All subsequent calls.
    --clear|-C	    Clear a previous message (before executing a command outside
		    of this).
    --finish|-F	    The final call; clears a previous message / writes the final
		    message and discards the duration and count records.
    --id|-i ID	    In order to support multiple concurrent executions, the
		    client has to be uniquely identified (e.g. pass
		    PARENT-COMMAND-NAME-\$\$).
    --message|-m MESSAGE
		    Print / overwrite a previously printed message with MESSAGE.
		    You can use the following symbols, which will be replaced
		    with the current values:
			%COUNT%	    : Number of duration update
			%DURATION%  : Time elapsed (MM:SS) since the start.
			%TIMESTAMP% : Date and time of this update.
    --update-message|-M U-MESSAGE
		    Append U-MESSAGE to the previously printed MESSAGE on this
		    update. (Any previously given U-MESSAGE will be overwritten,
		    but MESSAGE will be kept.)
    --command|-c CMD	Execute the passed command line. When this is a simple
			command, it can also be passed as such. Clears any
			message and restores it afterwards, so that command
			output does not interfere with the messages.
    --silent-command	Disables the clearing and restoring around command
			execution, as an optimization. You need to ensure that
			the command does not do any output, or accept the
			consequence of left-behind messages.
EXIT STATUS:
    0	Complete success.
    1	Failed to write to the terminal.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion. TODO
    4	The passed ID does not exist.
    * any exit status from COMMANDS
Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '-i foo-$$ --initial -m "Frobnizing"'
    printf '%q %s\n' "$(basename "$1")" '-i foo-$$ --update -M " (%COUNT%, for %DURATION%)"'
    printf '%q %s\n' "$(basename "$1")" '-i foo-$$ --update ...'
    printf '%q %s\n' "$(basename "$1")" '-i foo-$$ --finish'
}
ACTIONS='--initial|--clear|--finish|--update'
multipleActionsError()
{
    echo >&2 "ERROR: Only one of $ACTIONS allowed."
    echo >&2
    printShortUsage "$1" >&2
    exit 2
}
badArgumentError()
{
    echo >&2 "ERROR: ${1:?}"
    echo >&2
    printShortUsage "$0" >&2
    exit 2
}

: ${NOW:=$(date +%s)}
: ${DURATION_MESSAGE_TIMESTAMP:=%d-%b-%Y %T}
action=
id=
isNeedEval=
message=
updateMessage=
typeset -a commands=()
isSilentCommand=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--id|-i)	shift; id="$1"; shift;;
	--initial|-I)	shift; [ "$action" ] && multipleActionsError "$0"; action=initial;;
	--clear|-C)	shift; [ "$action" ] && multipleActionsError "$0"; action=clear;;
	--finish|-F)	shift; [ "$action" ] && multipleActionsError "$0"; action=finish;;
	--update|-U)	shift; [ "$action" ] && multipleActionsError "$0"; action=update;;
	--message|-m)	shift; message="${1//[$'\n\t']/ }"; shift;;
	--update-message|-M)
			shift; updateMessage="${1//[$'\n\t']/ }"; shift;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--silent-command)
			shift; isSilentCommand=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	commands+=(${commands:+;} $(printf '%q ' "$@"))
    else
	commands=("$@")
    fi
fi
if [ ! "$action" ]; then
    badArgumentError "No action passed: $ACTIONS"
elif [ ! "$id" ]; then
    badArgumentError 'No ID passed.'
elif [ "$action" != update ]; then
    if [ ${#commands[@]} -gt 0 ]; then
	badArgumentError 'A COMMAND can only be passed to --update.'
    elif [ -n "$updateMessage" ]; then
	badArgumentError '--update-message can only be used with --update.'
    elif [ "$action" = clear -a -n "$message" ]; then
	badArgumentError '--message cannot be used with --clear.'
    fi
fi

database()
{
    miniDB --base-type runtime --table durationMessage --schema 'ID START_EPOCH UPDATE_COUNT GIVEN_MESSAGE PRINTED_MESSAGE GIVEN_UPDATE_MESSAGE PRINTED_UPDATE_MESSAGE CLEARED_YES_NO' "$@"
}
updateDatabase()
{
    isClearedZeroOrOne=${IS_CLEARED:-0}
    database --update "${id:?}	$START_EPOCH	$UPDATE_COUNT	$GIVEN_MESSAGE	$PRINTED_MESSAGE	$GIVEN_UPDATE_MESSAGE	$PRINTED_UPDATE_MESSAGE	${isClearedZeroOrOne//t/1}"
}
readDatabase()
{
    local query
    if ! query="$(database --query "${id:?}" --columns \* --as-shell-variables)"; then
	printf >&2 'ERROR: ID "%s" not found.\n' "$id"
	exit 4
    fi

    eval "$query"
    IS_CLEARED=; [ "${CLEARED_YES_NO:-0}" = 0 ] || IS_CLEARED=t
}
deleteDatabase()
{
    database --delete "${id:?}"
}

printfToTerminal()
{
    # Print directly to terminal, even if stdout is redirected, ignoring a
    # non-existing terminal.
    { printf "$@" >"${DURATION_MESSAGE_SINK:-/dev/tty}"; } 2>/dev/null || return 1
}

expandSymbols()
{
    local message="$1"; shift
    message="${message//\%COUNT%/${UPDATE_COUNT}}"
    if [ "${message/\%DURATION%/}" != "$message" ]; then
	message="${message//%DURATION%/$(secondsToDuration -- "$((NOW - START_EPOCH))")}"
    fi
    if [ "${message/\%TIMESTAMP%/}" != "$message" ]; then
	message="${message//%TIMESTAMP%/$(date -d "@$NOW" "+$DURATION_MESSAGE_TIMESTAMP")}"
    fi
    printf %s "$message"
}

initial()
{
    START_EPOCH=$NOW
    UPDATE_COUNT=0
    GIVEN_MESSAGE="$message"
    PRINTED_MESSAGE="$(expandSymbols "$message")"
    GIVEN_UPDATE_MESSAGE=""
    PRINTED_UPDATE_MESSAGE=""
    IS_CLEARED=

    local status=0
    if [ "$message" ]; then
	if ! printfToTerminal '%s' "$PRINTED_MESSAGE"; then
	    status=1
	    PRINTED_MESSAGE=
	fi
    fi

    updateDatabase
    return $status
}

clear()
{
    readDatabase

    local status=0
    local printedMessages="${PRINTED_MESSAGE}${PRINTED_UPDATE_MESSAGE}"
    if [ "$printedMessages" ]; then
	if printfToTerminal '%s' "${printedMessages//?/}"; then
	    PRINTED_MESSAGE=
	    PRINTED_UPDATE_MESSAGE=

	    updateDatabase
	else
	    status=1
	fi
    fi
    return $status
}

finish()
{
    readDatabase

    local status=0
    local printedMessages="${PRINTED_MESSAGE}${PRINTED_UPDATE_MESSAGE}"
    local finishMessage="${printedMessages//?/}${printedMessages:+[0K}$(expandSymbols "$message")${message:+$'\n'}"
    if [ "$finishMessage" ]; then
	if printfToTerminal '%s' "$finishMessage"; then
	    deleteDatabase; status=$?
	else
	    status=1
	    GIVEN_MESSAGE="$message"
	    GIVEN_UPDATE_MESSAGE=""
	    let UPDATE_COUNT+=1
	fi
    else
	deleteDatabase; status=$?
    fi
    return $status
}

update()
{
    if [ ${#commands[@]} -eq 0 ]; then
	:
    else
	if [ "$isNeedEval" ]; then
	    eval "${commands[@]}"
	else
	    "${commands[@]}"
	fi
    fi
}

"$action"
