#!/bin/bash
shopt -qs extglob

: ${INVOCATIONNOTIFICATION_MESSAGE_MARKER:='{}'}
messageMarker="$INVOCATIONNOTIFICATION_MESSAGE_MARKER"; unset INVOCATIONNOTIFICATION_MESSAGE_MARKER
: ${INVOCATIONNOTIFICATION_SUCCESS_DISPLAY_DELAY=0.3}
: ${INVOCATIONNOTIFICATION_FAIL_DISPLAY_DELAY=1}
: ${INVOCATIONNOTIFICATION_TIMER_INLINE_PREFIX=(}
: ${INVOCATIONNOTIFICATION_TIMER_INLINE_SUFFIX=) }
: ${INVOCATIONNOTIFICATION_TIMER_RENDER_PREFIX=(}
: ${INVOCATIONNOTIFICATION_TIMER_RENDER_SUFFIX=) }
: ${INVOCATIONNOTIFICATION_TIMER_SIGIL_PREFIX= (}
: ${INVOCATIONNOTIFICATION_TIMER_SIGIL_SUFFIX=)}
typeset -a SPINNER=(/ - \\ \|)
typeset -a SWEEPS=('[*   ]' '[-*  ]' '[ -* ]' '[  -*]' '[   *]' '[  *-]' '[ *- ]' '[*-  ]')

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-m|--message MESSAGE -o|--to overlay|title|command|notify [--success SIGIL] [--fail SIGIL] [-C|--clear success|failure|all] [-i|--inline|--spinner|--sweep|--inline-stderr|--spinner-stderr|--sweep-stderr|--inline-spinner-stderr|--inline-sweep-stderr|--spinner-stderr-inline|--sweep-stderr-inline [--render-timer INTERVAL[SUFFIX]] [-t|--timespan TIMESPAN[SUFFIX]]] [-T|--initial-delay TIMESPAN[SUFFIX]] [--timer INTERVAL[SUFFIX]] -c|--command COMMANDLINE [...]|[--] SIMPLECOMMAND'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
plural()
{
    if [ "$1" = 1 ]; then
	printf %s "${2}${4}"
    else
	printf %s "${2}${3:-s}"
    fi
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND while MESSAGE informs the user what is happening elsewhere.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --to|-o overlay	Report in the form of overlaid text, written via ANSI
			escape sequences in the first line of the terminal.
    --to|-o title	Report in the terminal's window title via ANSI escape
			sequences.
    --to|-o command	Report by invoking INVOCATIONNOTIFICATION_COMMANDLINE
			while replacing $messageMarker with the message.
    --to|-o notify	Report via notify-send to the system's notification
			system.
    --message|-m MESSAGE
			Text describing what COMMAND is doing for the user.
    --success SIGIL	Append SIGIL after MESSAGE if COMMAND succeeds.
    --fail SIGIL	Append SIGIL after MESSAGE if COMMAND fails.
    --clear|-C success	Clear the MESSAGE if COMMAND succeeds.
			If --success is also given, will wait for
			$INVOCATIONNOTIFICATION_SUCCESS_DISPLAY_DELAY $(plural $INVOCATIONNOTIFICATION_SUCCESS_DISPLAY_DELAY second).
    --clear|-C failure	Clear the MESSAGE if COMMAND fails, i.e. returns a
			non-zero exit status.
			If --fail is also given, will wait for
			$INVOCATIONNOTIFICATION_FAIL_DISPLAY_DELAY $(plural $INVOCATIONNOTIFICATION_FAIL_DISPLAY_DELAY second).
    --clear|-C all	Clear the MESSAGE regardless of whether COMMAND
			succeeds or not.
    --inline|-i		Each line printed to stdout or stderr by COMMAND is
			captured and individually appended behind MESSAGE,
			overwriting any previous line (and then eventually
			overwritten itself by a SIGIL). Only stdout will pass
			through. This is useful when COMMAND itself prints
			ongoing results or status information.
			By default, both stdout and stderr will pass through.
    --spinner		Each line printed to stdout or stderr by COMMAND makes a
			spinner after MESSAGE rotate once (to indicate that
			COMMAND is still doing its job). Both stdout and stderr
			output is still passed through.
    --sweep		Each line printed to stdout or stderr by COMMAND changes
			a Knight Rider-alike sweeping control after MESSAGE (to
			indicate that COMMAND is still doing its job). Both
			stdout and stderr output is still passed through.
    --inline-stderr	Each line printed to stderr by COMMAND is captured and
			individually appended behind MESSAGE, overwriting any
			previous line (and then eventually overwritten itself by
			a SIGIL). This is useful when COMMAND itself prints
			ongoing status information to stderr. By default, any
			error output will pass through.
    --spinner-stderr	Each line printed to stderr by COMMAND makes a spinner
			after MESSAGE rotate once (to indicate that COMMAND is
			still doing its job). The output itself is discarded.
    --sweep-stderr	Each line printed to stderr by COMMAND changes a Knight
			Rider-alike sweeping control after MESSAGE (to indicate
			that COMMAND is still doing its job). The output itself
			is discarded.
    --inline-spinner-stderr
			Lines printed to stdout are appended as with --inline,
			but lines printed to stderr make a spinner after MESSAGE
			/ the last line rotate like --spinner-stderr.
    --inline-sweep-stderr
			Lines printed to stdout are appended as with --inline,
			but lines printed to stderr changes a sweeping control
			after MESSAGE / the last line like --sweep-stderr.
    --spinner-stderr-inline
			Lines printed to stdout are appended as with --inline,
			but lines printed to stderr make a spinner before
			MESSAGE / the last line rotate like --spinner-stderr.
			Same as --inline-spinner-stderr but the spinner comes
			first.
    --sweep-stderr-inline
			Lines printed to stdout are appended as with --inline,
			but lines printed to stderr changes a sweeping control
			before MESSAGE / the last line like --sweep-stderr.
			Same as --inline-sweep-stderr but the sweeping control
			comes first.
    --timespan|-t TIMESPAN[SUFFIX]
			Only append / spin / sweep a line every TIMESPAN instead
			of every second. Use --timespan 0 to use every line.
			SUFFIX may be 'ms' for milliseconds, 's' for seconds
			(the default), 'm' for minutes, 'h' for hours or 'd' for
			days.
    --initial-delay|-T TIMESPAN[SUFFIX]
			Wait for TIMESPAN before notifying with the message or
			appending / spinning / sweeping based on a line. By
			default, the first notification happens immediately.
    --timer INTERVAL[SUFFIX]
			Append the COMMAND's total running time after MESSAGE
			every INTERVAL. This provides some form of feedback if
			COMMAND does not (or not often) provide output.
    --render-timer INTERVAL[SUFFIX]
			Rotate the spinner / change the sweeping control every
			INTERVAL. This provides some form of feedback if COMMAND
			does not (or not often) provide output.
    --command|-c CMD	Execute the passed command line. When this is a simple
			command, it can also be passed as such.
EXIT STATUS:
    0	Complete success.
    1	Failed to notify.
    2	Bad invocation, wrong or missing command-line arguments.
    *	any exit status from COMMANDS

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" "-t overlay -m 'Google ping time: ' --inline-stderr -c 'ping -c 10 www.google.com 2>&1 | stdbuf -oL grep --line-buffered -o time=.* >&2'"
}

timeToSeconds()
{
    case "$1" in
	+([0-9])ms)	if [ "$3" ]; then
			    echo >&2 "ERROR: Fractional seconds not allowed for ${2:-timespan}."; exit 2
			else
			    time="00${1%ms}"; time="0${time%???}.${time:$((${#time}-3))}"; time="${time/#+(0)/0}"
			fi
			;;
	+([0-9])?(s))   time="${1%s}";;
	+([0-9])m)	time=$((${1%m} * 60));;
	+([0-9])h)	time=$((${1%h} * 3600));;
	+([0-9])d)	time=$((${1%d} * 86400));;
	*)		printf >&2 "ERROR: Illegal ${2:-timespan}: %s\\n" "$1"; exit 2;;
    esac
    printf %s "$time"
}

singleTargetCheck()
{
    if [ "$target" ]; then
	echo >&2 "ERROR: There can be only one --to."
	echo >&2
	printShortUsage "$1" >&2
	exit 2
    fi
}

abortSingleRenderer()
{
    echo >&2 'ERROR: Only one of --inline[-stderr], --spinner[-stderr], or --sweep[-stderr] can be passed.'
    echo >&2
    printShortUsage "$1" >&2
    exit 2
}

overlayTarget()
{
    if [ $# -eq 0 ]; then
	printfToTerminal %s "$INVOCATIONNOTIFICATION_OVERLAY_JUMP" "$ERASE_LINE_TO_END" "$INVOCATIONNOTIFICATION_OVERLAY_RETURN"
    else
	printfToTerminal %s "$INVOCATIONNOTIFICATION_OVERLAY_JUMP" "$INVOCATIONNOTIFICATION_OVERLAY_PREFIX" "$message" "$1" "$INVOCATIONNOTIFICATION_OVERLAY_SUFFIX" "$ERASE_LINE_TO_END" "$INVOCATIONNOTIFICATION_OVERLAY_RETURN"
    fi
}
titleTarget()
{
    if [ $# -eq 0 ]; then
	printfToTerminal %s "$INVOCATIONNOTIFICATION_TITLE_SET" "$INVOCATIONNOTIFICATION_TITLE_FINISH"
    else
	printfToTerminal %s "$INVOCATIONNOTIFICATION_TITLE_SET" "$INVOCATIONNOTIFICATION_TITLE_PREFIX" "$message" "$1" "$INVOCATIONNOTIFICATION_TITLE_SUFFIX" "$INVOCATIONNOTIFICATION_TITLE_FINISH"
    fi
}
commandStatus=0
commandTarget()
{
    [ $commandStatus -eq 0 ] || return $commandStatus

    local quotedArgument=; [ $# -gt 0 ] && printf -v quotedArgument %q "${message}$1"
    eval "${INVOCATIONNOTIFICATION_COMMANDLINE//"$messageMarker"/$quotedArgument}"
    commandStatus=$?
    return $commandStatus
}
notifyTarget()
{
    commandTarget "$@"
}

: ${SAVE_CURSOR_POSITION=[s}
: ${RESTORE_CURSOR_POSITION=[u}
: ${ERASE_LINE_TO_END=[0K}
: ${OVERLAY_POSITION=[1;1H}
: ${INVOCATIONNOTIFICATION_OVERLAY_JUMP=${SAVE_CURSOR_POSITION}${OVERLAY_POSITION}}
: ${INVOCATIONNOTIFICATION_OVERLAY_PREFIX=[37;44m[}
: ${INVOCATIONNOTIFICATION_OVERLAY_SUFFIX=][0m}
: ${INVOCATIONNOTIFICATION_OVERLAY_RETURN=${RESTORE_CURSOR_POSITION}}
case "$TERM" in
    screen*)
	: ${INVOCATIONNOTIFICATION_TITLE_SET=']2;'}
	: ${INVOCATIONNOTIFICATION_TITLE_FINISH='\'}
	;;
    linux)
	# The Linux kernel console doesn't have a title, as it runs full-screen.
	printf >&2 'ERROR: Cannot drive terminal title with TERM=%s\n' "$TERM"
	exit 3
	;;
    *)
	: ${INVOCATIONNOTIFICATION_TITLE_SET=']2;'}
	: ${INVOCATIONNOTIFICATION_TITLE_FINISH=''}
	;;
esac
: ${INVOCATIONNOTIFICATION_TITLE_PREFIX=[}
: ${INVOCATIONNOTIFICATION_TITLE_SUFFIX=]}
: ${INVOCATIONNOTIFICATION_NOTIFY_SEND:=notify-send}
target=
unset message
successSigil=
failSigil=
clear=
isCaptureStdout=
isInline=
isInlineWithRender=
isRenderBeforeInline=
typeset -a render=()
unset timespan
initialDelay=0
reader=defaultReader
timer=
isTimer=
isRenderTimer=
isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--to|-o)	shift; singleTargetCheck "$0"; target="${1}Target"; if ! type -t "$target" >/dev/null; then printf 'ERROR: No such target: %s\n' "$1"; echo; printShortUsage "$0"; exit 2; fi >&2; shift;;
	--message|-m)	shift; message="$1"; shift;;
	--success)	shift; successSigil="$1"; shift;;
	--fail)		shift; failSigil="$1"; shift;;
	--clear|-C)	shift
			clear="$1"
			case "$clear" in
			    success|failure|all)  ;;
			    *)  { printf 'ERROR: Invalid value for --clear: %s\n' "$clear"; echo; printShortUsage "$0"; } >&2; exit 2;;
			esac
			shift
			;;
	--inline|-i)	shift; [ "$isInline" ] && abortSingleRenderer "$0"; isInline=t; isCaptureStdout=t;;
	--inline-stderr)
			shift; [ "$isInline" ] && abortSingleRenderer "$0"; isInline=t;;
	--spinner)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SPINNER[@]}"); isCaptureStdout=t;;
	--spinner-stderr)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SPINNER[@]}");;
	--inline-spinner-stderr)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SPINNER[@]}"); isCaptureStdout=t; isInlineWithRender=t;;
	--spinner-stderr-inline)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SPINNER[@]}"); isCaptureStdout=t; isInlineWithRender=t; isRenderBeforeInline=t;;
	--sweep)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SWEEPS[@]}"); isCaptureStdout=t;;
	--sweep-stderr)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SWEEPS[@]}");;
	--inline-sweep-stderr)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SWEEPS[@]}"); isCaptureStdout=t; isInlineWithRender=t;;
	--sweep-stderr-inline)
			shift; [ ${#render[@]} -eq 0 ] || abortSingleRenderer "$0"; render=("${SWEEPS[@]}"); isCaptureStdout=t; isInlineWithRender=t; isRenderBeforeInline=t;;
	--timespan|-t)	shift; timespan="$(timeToSeconds "$1")" || exit $?; shift;;
	--initial-delay|-T)
			shift; initialDelay="$(timeToSeconds "$1")" || exit $?; shift;;
	--timer)	shift; reader=timeoutReader; timer="$(timeToSeconds "$1" interval t)" || exit $?; shift; SECONDS=0; isTimer=t;;
	--render-timer)	shift; reader=timeoutReader; timer="$(timeToSeconds "$1" interval t)" || exit $?; shift; SECONDS=0; isRenderTimer=t;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	commands+=(${commands:+;} $(printf '%q ' "$@"))
    else
	commands=("$@")
    fi
fi
if [ -z "$target" -a -z "${message+t}" -a ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: Must pass -o|--to overlay|title|command|notify and -m|--message MESSAGE and COMMAND(s).'
    echo
    printShortUsage "$0"
    exit 2
elif [ -z "$target" ]; then
    echo 'ERROR: No --to target passed.'
    echo
    printShortUsage "$1"
    exit 2
elif [ -z "${message+t}" ]; then
    echo 'ERROR: Must pass -m|--message MESSAGE.'
    echo
    printShortUsage "$0"
    exit 2
elif [ "$isInline" ] && [ "${#render[@]}" -gt 0 ]; then
    abortSingleRenderer "$0"
elif [ -n "${timespan+t}" ] && [ ! "$isInline" ] && [ ${#render[@]} -eq 0 ]; then
    echo 'ERROR: --timespan can only be used in combination with one of --inline[-stderr], --spinner[-stderr], or --sweep[-stderr].'
    echo
    printShortUsage "$0"
    exit 2
elif [ "$isRenderTimer" ] && [ ${#render[@]} -eq 0 ]; then
    echo 'ERROR: --render-timer can only be used in combination with --spinner[-stderr] or --sweep[-stderr].'
    echo
    printShortUsage "$0"
    exit 2
elif [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
fi >&2
if [ "$target" = 'commandTarget' ]; then
    if [ -z "$INVOCATIONNOTIFICATION_COMMANDLINE" ]; then
	echo 'ERROR: Command notification must define INVOCATIONNOTIFICATION_COMMANDLINE.'
	exit 2
    fi
    if [ -n "$INVOCATIONNOTIFICATION_PRE_COMMANDLINE" ]; then
	eval "$INVOCATIONNOTIFICATION_PRE_COMMANDLINE" || exit $?
    fi
    if [ -n "$INVOCATIONNOTIFICATION_POST_COMMANDLINE" ]; then
	trap "$INVOCATIONNOTIFICATION_POST_COMMANDLINE" EXIT
    fi
elif [ "$target" = 'notifyTarget' ]; then
    if [ -z "$INVOCATIONNOTIFICATION_NOTIFY_COMMANDLINE" ] && ! which "$INVOCATIONNOTIFICATION_NOTIFY_SEND" >/dev/null 2>&1; then
	printf 'ERROR: notify-send command (%s) not found.\n' "$INVOCATIONNOTIFICATION_NOTIFY_SEND"
	exit 2
    fi
    printf -v quotedCommandName %q "$(commandName --no-interpreter ${isNeedEval:+--eval} "${commands[@]}")"
    : ${INVOCATIONNOTIFICATION_NOTIFY_COMMANDLINE:="\"$INVOCATIONNOTIFICATION_NOTIFY_SEND\"${INVOCATIONNOTIFICATION_NOTIFY_ARGUMENTS:+ $INVOCATIONNOTIFICATION_NOTIFY_ARGUMENTS} $quotedCommandName -- $messageMarker"}

    # Reuse the commandTarget for this specialization.
    INVOCATIONNOTIFICATION_COMMANDLINE="$INVOCATIONNOTIFICATION_NOTIFY_COMMANDLINE"
fi >&2

: ${timespan:=1}
# If the timer is used, reserve use of SECONDS for that (as we can easily (but a
# bit more slowly) use external date for the timespan and initial delay), as
# timing interval likely will fire more often than the (likely infrequent)
# output.
case "${timespan}:${initialDelay}${timer:+.}" in
    0:0?(.))
	resetTime()
	{
	    :
	}
	isExpired()
	{
	    :
	}
	;;
    *.*)
	: ${DATE:=date}

	resetTime()
	{
	    if [ $# -eq 0 ]; then
		IFS='.' read startEpoch startNanos <<<"$($DATE +%s.%N)"
	    else
		IFS='.' read startEpoch startNanos <<<"$(awk 'BEGIN{ printf "%.3f\n", ARGV[1] - ARGV[2] + ARGV[3]; }' "$($DATE +%s.%N)" "${1:-0}" "${2:-0}")"
	    fi
	}
	case "$timespan" in
	    *.*)
		isExpired()
		{
		    IFS='.' read endEpoch endNanos <<<"$($DATE +%s.%N)"
		    local startMillis=10#${startNanos:0:3}; local endMillis=10#${endNanos:0:3}; local diffMillis=$(((endEpoch - startEpoch) * 1000))
		    [ $((endMillis + diffMillis - startMillis)) -ge ${timespan/./} ]
		}
		;;
	    *)
		isExpired()
		{
		    IFS='.' read endEpoch endNanos <<<"$($DATE +%s.%N)"
		    local startMillis=10#${startNanos:0:3}; local endMillis=10#${endNanos:0:3}; local diffMillis=$(((endEpoch - startEpoch) * 1000))
		    [ $((endMillis + diffMillis - startMillis)) -ge ${timespan:?}000 ]
		}
		;;
	esac
	;;
    *)
	resetTime()
	{
	    if [ $# -eq 0 ]; then
		SECONDS=0
	    else
		SECONDS=$((${1:-0} - ${2:-0}))
	    fi
	}
	isExpired()
	{
	    [ $SECONDS -ge $timespan ]
	}
	;;
esac

line=
duration=0
lastDuration=0
defaultReader()
{
    IFS=$'\n' read -r line
}
heldChars=''
timeoutReader()
{
    local char
    while :
    do
	if IFS=$'\n' read -t 2 -n 1 -r char; then
	    if [ -z "$char" ]; then
		line="${heldChars}"
		heldChars=''
		return 0
	    else
		heldChars="${heldChars}$char"
		continue
	    fi
	elif [ $? -gt 128 ]; then
	    duration=$SECONDS
	    return 0
	elif [ -n "$heldChars" ]; then
	    line="$heldChars"
	    heldChars=''
	    return 0
	else
	    line=''
	    return 1
	fi
    done
}

isTerminalOk=t
printfToTerminal()
{
    [ "$isTerminalOk" ] || return 1

    # Print directly to terminal, even if stdout is redirected, ignoring a
    # non-existing terminal.
    if ! { printf "$@" >> "${INVOCATIONNOTIFICATION_SINK:-/dev/tty}"; } 2>/dev/null; then
	isTerminalOk=
	return 1
    fi
}

invokeTargetRaw()
{
    "$target" "$@" || status=$?
}
hasInvokedTarget=
invokeTarget()
{
    isExpired || return 1
    invokeTargetRaw "$@" || return $?
    hasInvokedTarget=t
}
invokeTargetAndResetTimer()
{
    invokeTarget "$@" || return $?
    resetTime
    return 0
}
invokeTargetAddendum()
{
    if [ "$hasInvokedTarget" ]; then
	invokeTargetRaw "$@"
    else
	invokeTarget "$@"
    fi
}
invokeTargetClear()
{
    local status="${1##*$STATUSLINE_PREFIX}"; shift
    local isNeedClear=t
    # Only invoke if no sigil and no clearing happens.
    [ -n "$successSigil" -a $status -eq 0 ] && isNeedClear=
    [ -n "$failSigil" -a $status -ne 0 ] && isNeedClear=
    [ "$clear" ] && [ \
	"$clear" = all -o \
	\( "$clear" = success -a $status -eq 0 \) -o \
	\( "$clear" = failure -a $status -ne 0 \) \
	] && isNeedClear=
    [ "$isNeedClear" ] && invokeTargetAddendum "$1"
}
invokeTargetDuration()
{
    if [ "$hasInvokedTarget" ]; then
	# Initial delay has already passed, do the update without considering
	# timeout expiry.
	invokeTargetRaw "$@"
    else
	invokeTarget "$@"
    fi
}
secondsToDuration()
{
    local seconds="${1:?}"; shift
    local weeks=$((seconds / 604800))
    seconds=$((seconds - 604800 * weeks))
    local days=$((seconds / 86400))
    seconds=$((seconds - 86400 * days))
    local hours=$((seconds / 3600))
    seconds=$((seconds - 3600 * hours))
    local minutes=$((seconds / 60))
    seconds=$((seconds - (60 * minutes)))

    local renderedWeeks renderedDays renderedHours renderedMinutes renderedSeconds
    [ $weeks -gt 0 ] && renderedWeeks="${weeks}w "
    [ $days -gt 0 ] && renderedDays="${days}d "
    [ $weeks -gt 0 -o $days -gt 0 -o $hours -gt 0 ] && printf -v renderedHours %02d: "$hours"
    [ $weeks -gt 0 -o $days -gt 0 -o $hours -gt 0 -o $minutes -gt 0 ] && printf -v renderedMinutes %02d: "$minutes"
    [ $weeks -gt 0 -o $days -gt 0 -o $hours -gt 0 -o $minutes -gt 0 ] && printf -v renderedSeconds %02d "$seconds" || renderedSeconds="${seconds}s"
    printf '%s%s%s%s%s' "$renderedWeeks" "$renderedDays" "$renderedHours" "$renderedMinutes" "$renderedSeconds"
}
renderedDuration=
renderDuration()
{
    renderedDuration="$(secondsToDuration "$duration")"
}
renderCurrentDuration()
{
    duration=$SECONDS
    renderDuration
}
handlePlainDurationUpdate()
{
    renderDuration
    if invokeTargetDuration "$renderedDuration"; then
	lastDuration="$duration"
    else
	renderedDuration=''
    fi
}

initialTargetStatus=
resetTime "$timespan" "$initialDelay"
if [ $initialDelay = 0 ]; then
    invokeTarget '' || initialTargetStatus=$?
fi

STATUSLINE_PREFIX='#-#'
STDIN_START=''
STDIN_END=''

teeStdoutCommand=; [ "$isCaptureStdout" ] && if [ ${#render[@]} -eq 0 ]; then teeStdoutCommand='tee -a /dev/stderr'; else teeStdoutCommand="tee >(sed --unbuffered 's/.*/${STDIN_START}&${STDIN_END}/' >> /dev/stderr)"; fi
stdinLine=
let renderCount=0
unset previousLine
unset status
exec 4>&1 1>&2 2>&4 4>&-
while $reader
do
    if [ $((duration - lastDuration)) -ge ${timer:-999} ]; then
	if [ "$isInline" ]; then
	    renderDuration
	    netLine="${line%${STATUSLINE_PREFIX}+([0-9])}"
	    if [ -n "$netLine" ]; then
		invokeTargetDuration "${INVOCATIONNOTIFICATION_TIMER_INLINE_PREFIX}${renderedDuration}${INVOCATIONNOTIFICATION_TIMER_INLINE_SUFFIX}$netLine"
	    fi
	elif [ "${#render[@]}" -gt 0 ]; then
	    [ "$isTimer" ] && renderDuration || renderedDuration=''
	    netLine="${line%${STATUSLINE_PREFIX}+([0-9])}"
	    if [ "$isRenderBeforeInline" ]; then
		netLineAndRender="${render[$renderCount]}${netLine:+ }${netLine}"
	    else
		netLineAndRender="${netLine}${netLine:+ }${render[$renderCount]}"
	    fi
	    if invokeTargetDuration "${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_RENDER_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_RENDER_SUFFIX}$netLineAndRender"; then
		[ "$isRenderTimer" ] && let renderCount=$(((renderCount + 1) % (${#render[@]} - 1)))
	    fi
	else
	    handlePlainDurationUpdate
	fi
    else
	netLine="${line%${STATUSLINE_PREFIX}+([0-9])}"
	if [ "$isInline" ]; then
	    [ -n "$timer" -a $lastDuration -ne $SECONDS ] && renderCurrentDuration
	    if [ -n "$netLine" ]; then
		invokeTargetAndResetTimer "${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_INLINE_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_INLINE_SUFFIX}$netLine"
	    fi
	elif [ "${#render[@]}" -gt 0 ]; then
	    [ -n "$timer" -a $lastDuration -ne $SECONDS ] && renderCurrentDuration
	    [ "$isTimer" ] || renderedDuration=''

	    if [ "$isInlineWithRender" ]; then
		stderrLine="${netLine//${STDIN_START}*${STDIN_END}/}"
		if [ "$stderrLine" != "$netLine" ]; then
		    stdinLine="${netLine#*${STDIN_START}}"
		    stdinLine="${stdinLine%%${STDIN_END}*}"
		fi
		# As we do want to render empty lines output to stdout, we need to
		# explicitly filter out the final statusline output.
		if [ "$netLine" = "$line" ]; then
		    if [ "$isRenderBeforeInline" ]; then
			stdinAndRender="${render[$renderCount]}${stdinLine:+ }${stdinLine}"
		    else
			stdinAndRender="${stdinLine}${stdinLine:+ }${render[$renderCount]}"
		    fi
		    if invokeTargetAndResetTimer "${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_RENDER_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_RENDER_SUFFIX}$stdinAndRender"; then
			let renderCount=$(((renderCount + 1) % ${#render[@]}))
		    fi
		else
		    invokeTargetClear "$line" "$stdinLine"
		    statusLine="$line"
		fi
		continue
	    elif [ "$isCaptureStdout" ]; then
		stderrLine="${netLine//${STDIN_START}*${STDIN_END}/}"
		if [ -n "$stderrLine" ]; then
		    printf '%s\n' "$stderrLine"
		    netLine="${netLine//$STDIN_START/}"; netLine="${netLine//$STDIN_END/}"
		fi
	    fi

	    if [ "$netLine" = "$line" ]; then
		if [ -n "$netLine" ] && invokeTargetAndResetTimer "${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_RENDER_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_RENDER_SUFFIX}${render[$renderCount]}"; then
		    let renderCount=$(((renderCount + 1) % ${#render[@]}))
		fi
	    else
		invokeTargetClear "$line" ''
	    fi
	else
	    # To avoid printing the last (exit status) line, buffer one line and
	    # lag behind one line with printing.
	    if [ -n "${previousLine+t}" ]; then
		printf '%s\n' "$previousLine"
	    fi
	    previousLine="$line"

	    if [ -n "$timer" -a $lastDuration -ne $SECONDS ]; then
		duration=$SECONDS
		handlePlainDurationUpdate
	    fi
	fi
    fi
    statusLine="$line"
done < <(
    (
	if [ "$isNeedEval" ]; then
	    eval 'eval "${commands[@]}"' ${teeStdoutCommand:+|}$teeStdoutCommand
	else
	    eval '"${commands[@]}"' ${teeStdoutCommand:+|}$teeStdoutCommand
	fi 4>&1 1>&2 2>&4 4>&-
	commandStatus=${PIPESTATUS[0]}
	${teeStdoutCommand:+sleep ${INVOCATIONNOTIFICATION_SYNC_DELAY:-0.01}}
	exit $commandStatus
    )
    printf '%s%d\n' "$STATUSLINE_PREFIX" "$?"
)
exec 4>&1 1>&2 2>&4 4>&-

[ -n "${status+t}" ] || status="${statusLine##*$STATUSLINE_PREFIX}"

if [ -n "$timer" ]; then
    [ -n "${INVOCATIONNOTIFICATION_TIMER_SIGIL_PREFIX}${INVOCATIONNOTIFICATION_TIMER_SIGIL_SUFFIX}" ] &&
	renderCurrentDuration ||
	renderedDuration=''
fi
if [ -n "$successSigil" -a $status -eq 0 ]; then
    invokeTargetAddendum "${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_SIGIL_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_SIGIL_SUFFIX}$successSigil"
    case "$clear" in
	all|success) sleep "$INVOCATIONNOTIFICATION_SUCCESS_DISPLAY_DELAY";;
    esac
elif [ -n "$failSigil" -a $status -ne 0 ]; then
    invokeTargetAddendum "${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_SIGIL_PREFIX}${renderedDuration}${renderedDuration:+$INVOCATIONNOTIFICATION_TIMER_SIGIL_SUFFIX}$failSigil"
    case "$clear" in
	all|failure) sleep "$INVOCATIONNOTIFICATION_FAIL_DISPLAY_DELAY";;
    esac
fi

if [ "$clear" ] && [ \
    "$clear" = all -o \
    \( "$clear" = success -a $status -eq 0 \) -o \
    \( "$clear" = failure -a $status -ne 0 \) \
    ] ; then
    [ "$hasInvokedTarget" ] && invokeTargetRaw
fi

exit ${initialTargetStatus:-$status}
