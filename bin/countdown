#!/bin/bash
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--prefix TEXT] [--as dot|ephemereal] [-c|--clear|-C|--clear-always] [--interval TIMESPAN[SUFFIX][ADJUSTMENT]] NUMBER[SUFFIX] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Standin for sleep that prints updates to the terminal as it waits. Pauses for
NUMBER seconds. SUFFIX may be 's' for seconds (the default), 'm' for minutes,
'h' for hours or 'd' for days.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --prefix TEXT   Print TEXT before the remaining wait time.
    --as dot	    Append a period each interval.
    --as ephemereal Print (and overwrite) remaining wait times via ANSI escape
		    sequences.
    --clear|-c	    Clear TEXT and waiting indication after successful completion.
    --clear-always|-C
		    Clear TEXT and waiting indication also when the wait has
		    been aborted by the user (via Ctrl-C).
    --interval TIMESPAN[SUFFIX][ADJUSTMENT]
		    Wait TIMESPAN between updates instead of the one second
		    default. ADJUSTMENT can change the original value after
		    every iteration. It starts with either + or -, followed by
		    another TIMESPAN, optionally followed by either SUFFIX or %.
		    For example, 10m+30s starts with 10 minutes and then
		    increases that by 30 seconds on every iteration. 10-5%
		    starts with 10 seconds and then continually decreases that
		    by 5 percent.
HELPTEXT
}

timeToSeconds()
{
    case "$1" in
	*([0-9]).+([0-9]))
	    echo >&2 "ERROR: Floating point interval is not supported here."
	    exit 2
	    ;;
	+([0-9])?(s))   time="${1%s}";;
	+([0-9])m)	time=$((${1%m} * 60));;
	+([0-9])h)	time=$((${1%h} * 3600));;
	+([0-9])d)	time=$((${1%d} * 86400));;
	*)		printf >&2 'ERROR: Illegal interval: %s\n' "$1"; exit 2;;
    esac
    printf %s "$time"
}
timeWithAdjustmentToSeconds()
{
    local adjustment="${1##+([0-9.])?([smhd])}"
    local time="${1:0:$((${#1} - ${#adjustment}))}"
    if [ -z "$time" ]; then
	printf >&2 'ERROR: Empty interval: %s\n' "$time"; exit 2;
    fi
    case "$adjustment" in
	'')			;;
	[+-]+([0-9])?([smhd%]))	;;
	*)  printf >&2 'ERROR: Illegal adjustment: %s\n' "$adjustment"; exit 2;;
    esac
    time="$(timeToSeconds "$time" "$2")" || exit $?
    printf '%s\t%s\n' "$time" "$adjustment"
}
adjust()
{
    local var="${1?}"; shift
    local adjustment="$1"; shift
    eval "local value=\$$var"
    local newValue
    case "$adjustment" in
	'')	    return;;
	[+-]0?(%))  return;;
	++([0-9]))  newValue="$((value + ${adjustment#+}))";;
	-+([0-9]))  newValue="$((value - ${adjustment#-}))";;
	[+-]+([0-9])%)
		    # As Bash doesn't support floating point math yet, multiply
		    # with 100, add the percentage change, and divide back and
		    # round.
		    # To avoid that the rounding truncates small changes and
		    # therefore never lets the real value change, store the cent
		    # value in a global variable, and re-use that instead.
		    eval "local centValue=\$${var}CentValue"
		    [ "$centValue" ] || centValue=$((value * 100))

		    local change=$((${adjustment:1:-1} * value))
		    [ "${adjustment:0:1}" = '+' ] && let centValue+=$change || let centValue-=$change
		    newValue=$(((centValue + 50) / 100))

		    eval "${var}CentValue=\$centValue"
		    ;;
	*)	    printf >&2 'ASSERT: Invalid adjustment: %s\n' "$adjustment"; exit 3;;
    esac

    [ $newValue -le 0 ] && newValue=1
    eval "$var=\$newValue"
}


prefix='Waiting'
render='ephemereal'
isClear=
interval=1
intervalAdjustment=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--prefix)	shift; prefix="$1"; shift;;
	--clear|-c)	shift; isClear=t;;
	--clear-always|-C)
			shift; isClear=t; trap 'clear 2>/dev/null' EXIT;;
	--interval|-i)	shift; < <(timeWithAdjustmentToSeconds "$1") IFS=$'\t' read -r interval intervalAdjustment || exit 2; shift;;
	--as)		shift; render="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 1 ]; then
    printUsage "$0" >&2
    exit 2
fi
delay="$(timeToSeconds "$1")" || exit $?


secondsToDuration()
{
    local seconds="${1:?}"; shift
    local weeks=$((seconds / 604800))
    seconds=$((seconds - 604800 * weeks))
    local days=$((seconds / 86400))
    seconds=$((seconds - 86400 * days))
    local hours=$((seconds / 3600))
    seconds=$((seconds - 3600 * hours))
    local minutes=$((seconds / 60))
    seconds=$((seconds - (60 * minutes)))

    local renderedWeeks renderedDays renderedHours renderedMinutes renderedSeconds
    [ $weeks -gt 0 ] && renderedWeeks="${weeks}w "
    [ $days -gt 0 ] && renderedDays="${days}d "
    [ $weeks -gt 0 -o $days -gt 0 -o $hours -gt 0 ] && printf -v renderedHours %02d: "$hours"
    [ $weeks -gt 0 -o $days -gt 0 -o $hours -gt 0 -o $minutes -gt 0 ] && printf -v renderedMinutes %02d: "$minutes"
    [ $weeks -gt 0 -o $days -gt 0 -o $hours -gt 0 -o $minutes -gt 0 ] && printf -v renderedSeconds %02d "$seconds" || renderedSeconds="$seconds"
    printf '%s%s%s%s%s' "$renderedWeeks" "$renderedDays" "$renderedHours" "$renderedMinutes" "$renderedSeconds"
}
updateDuration()
{
    local previousDuration="$1"; shift
    local duration="$1"; shift
    local cleaner=

    local durationDiffCnt=$((${#previousDuration} - ${#duration}))
    if [ $durationDiffCnt -gt 0 ]; then
	cleaner="                    "
	cleaner="${cleaner:0:$durationDiffCnt}"
	cleaner="${cleaner}${cleaner//?/}"
    fi
    printf '%s%s%s' "${previousDuration//?/}" "$duration" "$cleaner"
}

# Force printing directly to terminal, even if stdout is redirected.
{ exec >/dev/tty; } 2>/dev/null || printf() { :; }

[ "$isClear" ] && printf '[s'
clear()
{
    printf '%s' "[u" "[0K"
}

finalizer=
case "$render" in
    dot)	    printf '%s' "$prefix";;
    ephemereal)	    printf '%s' "${prefix}${prefix:+ }"
		    previousDuration=
		    duration=
		    finalizer='updateDuration "${prefix:+ }$duration" ""'
		    ;;
    *)		    printf >&2 'Invalid render: %s\n' "$render"; echo >&2; printUsage "$0" >&2; exit 2;;
esac

SECONDS=0
while [ $SECONDS -lt $delay ]
do
    case "$render" in
	dot)	    printf '.';;
	ephemereal) previousDuration="$duration"
		    duration="$(secondsToDuration "$((delay - SECONDS))")"
		    updateDuration "$previousDuration" "$duration"
		    ;;

    esac

    sleep "$interval" || exit $?
    adjust interval "$intervalAdjustment"
done

if [ "$isClear" ]; then
    clear
else
    eval "$finalizer"
    printf '\n'
fi
